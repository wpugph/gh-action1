name: Pantheon Build

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      PANTHEONSITEUUID: "${{ secrets.PANTHEONSITEUUID }}"
      PANTHEONEMAIL: "${{ secrets.PANTHEONEMAIL }}"
      MACHINETOKEN: "${{ secrets.MACHINETOKEN }}"
      STAGING_PRIVATE_KEY: "${{ secrets.STAGING_PRIVATE_KEY }}"
      PROJECT_ROOT: "$(pwd)"

    steps:
    - uses: actions/checkout@v2

    - name: Cache
      id: cache
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.os }}-cache

    - name: Cache found
      if: steps.cache-vendor.outputs.cache-hit != 'true'
      run: |
        echo 'Cache found'
        ls web

    - name: Pantheon Build
      id: cache-vendor
      run: |
        
        export PROJECT_ROOT="$(pwd)"
        . $PROJECT_ROOT/config  

        sh $PROJECT_ROOT/scripts/github/load-variables

        sh $PROJECT_ROOT/scripts/github/setup-terminus

        # sh $PROJECT_ROOT/scripts/github/load-keys
        
        # composer build and deploy backstopjs to QA site
        # sh $PROJECT_ROOT/scripts/github/build-wp-composer

        # sh $PROJECT_ROOT/scripts/github/setup-backstop

        printf "[\e[0;34mNOTICE\e[0m] Build COMPLETE!!!.\n"

    - name: Install SSH key and composer
      run: |
        export PROJECT_ROOT="$(pwd)"
        . $PROJECT_ROOT/config  
        sh $PROJECT_ROOT/scripts/github/build-wp-composer

    - name: Install SSH key and composer
      run: |
        cd $PROJECT_ROOT
        rm $PROJECT_ROOT/composer.lock
        composer install
        echo 'wp composer build success!!'

        ssh-add -l

        sh $PROJECT_ROOT/scripts/github/load-keys
        export PATH="$PATH:$COMPOSER_HOME/vendor/bin"
        echo "COMPOSER PATH:"$PATH
        export PROJECT_ROOT="$(pwd)"
        export GITHUB_BRANCH=${GITHUB_REF##*heads/}
        printf "[\e[0;34mNOTICE\e[0m] Setting up SSH access to server for rsync usage.\n"
        SSH_DIR="$HOME/.ssh"
        echo "SSHDIR PATH:"$SSH_DIR

        mkdir -p "$SSH_DIR"
        chmod 700 "$SSH_DIR"
        touch "$SSH_DIR/id_rsa1"
        touch "$SSH_DIR/config"
        echo "Host *\n\tStrictHostKeyChecking no\n\n" > "$SSH_DIR/config"
        # echo "${{ secrets.STAGING_PRIVATE_KEY }}" > "$SSH_DIR/id_rsa1"
        echo "$STAGING_PRIVATE_KEY" > "$SSH_DIR/id_rsa1"
        chmod 600 "$SSH_DIR/id_rsa1"
        chmod 600 "$SSH_DIR/config"
        eval "$(ssh-agent -s)"
        ssh-add "$SSH_DIR/id_rsa1"
        ssh-add -l
        cat $SSH_DIR/id_rsa1
        cat $SSH_DIR/config
        echo "SSH PRIVATE KEY IMPORTED!!!"

        export QA_SITE_URL="https://$QA_PANTHEONENV-$PANTHEONSITENAME.pantheonsite.io/"
        export TEST_SITE_URL="https://$PANTHEONENV-$PANTHEONSITENAME.pantheonsite.io/"
        export REFERENCE_SITE_URL="$REFERENCE_SITE_URL"
        sh $PROJECT_ROOT/scripts/github/setup-backstop

    - name: Cache test
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo $REFERENCE_SITE_URL
        echo "cache$REFERENCE_SITE_URL//"

    - name: Cache dependencies
      uses: actions/upload-artifact@v1
      with:
        name: vendor-dep
        path: |
          vendor

    - name: Upload custom code
      uses: actions/upload-artifact@v1
      with:
        name: custom-code
        path: |
          web/wp-content/themes/storefrontchild
  
  backstop-test:
    runs-on: ubuntu-latest
    steps:
    - name: Test build
      id: cache
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.os }}-cache
    
    - name: Cache found
      if: steps.cache-vendor.outputs.cache-hit != 'true'
      run: |
        echo 'Cache found'
        ls

  deploy-live:
    runs-on: ubuntu-latest
    steps:
    - name: Test build
      id: cache
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.os }}-cache
    
    - name: Cache found
      if: steps.cache-vendor.outputs.cache-hit != 'true'
      run: |
        echo 'Cache found'
        ls
  
  